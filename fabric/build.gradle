plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    //modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    include modImplementation("nl.enjarai:cicada-lib:${project.cicada_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    modImplementation("dev.isxander:yet-another-config-lib:${project.yacl_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    modImplementation("dev.isxander:controlify:${project.controlify_version}:fabric-1.19.4") {
        exclude group: "net.fabricmc.fabric-api"
    }

    // Mod Menu integration. Currently unused.
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    // Cloth Config for easy config menu.
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    // Mixin Extras for extra compatibility.
    implementation("com.github.llamalad7.mixinextras:mixinextras-fabric:${project.mixin_extras_version}")
    annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:${project.mixin_extras_version}")

    // Cardinal Components API for storing data server-side.
    include modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_components_version}")
    include modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_components_version}")

    // Fungible for easier testing, provided by my personal mirrors maven.
//    modRuntimeOnly "net.darktree:fungible:${project.fungible_version}"
}



processResources {
    inputs.property "version", project.version
    inputs.property "mod_id", rootProject.mod_id

    filesMatching("fabric.mod.json") {
        expand "version": project.version, "mod_id": rootProject.mod_id
    }
}


shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
    archiveClassifier = 'fabric'
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases" }
}